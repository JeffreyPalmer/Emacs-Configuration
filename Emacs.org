#+PROPERTY: header-args:emacs-lisp :tangle /Users/jeff/.emacs.d/init.el

TODO: Look into using [[https://emacs.stackexchange.com/questions/36727/order-of-blocks-in-org-tangle][this]] to support block reordering, if necessary

A bunch of the content in this file is inspired by/taken from the
[[https://systemcrafters.net/emacs-from-scratch/][System Crafters]] site/channel.

This file contains the complete, documented configuration for my Emacs.

The goal of this work is to be able to generate a fixed, known-good
configuration for emacs from this file.

#+begin_src emacs-lisp
  (defvar jpalmer/default-font-size 130)
  (defvar jpalmer/default-variable-font-size 150)
#+end_src

* User Information
#+begin_src emacs-lisp
  (setq user-full-name "Jeffrey Palmer"
        user-mail-address "jeffrey.palmer@acm.org")
#+end_src

* Startup Performance
Make startup faster by reducing the frequency of garbage collection
and then use a hook to measure and report startup time.

#+begin_src emacs-lisp
  ;; The default is 800 kb. Measured in bytes
  (setq gc-cons-threshold (* 50 1024 1024))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

* Native Compilation
#+begin_src emacs-lisp
  ;; Silence native code compiler warnings, as they're pretty chatty
  (setq comp-async-report-warnings-errors nil
        ;; This was generated when I asked emacs to disable the display of these compilation errors
        warning-suppress-types '((comp) (comp)))
#+end_src
* Package Management
** straight.el
First of all we need to disable package.el by default so that it's never loaded.

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

Then straight.el needs to be bootstrapped. This bootstrapping code is provided directly by the [[https://github.com/radian-software/straight.el][straight.el]] project.

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

  ;; Load the helper package for commands like `straight-x-clean-unused-repos`
  (require 'straight-x)
#+end_src

** use-package configuration

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src

* Keep runtime files out of .emacs.d
#+begin_src emacs-lisp
  ;; Use a different directory for runtime files
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url-history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)

  ;; Keep customization settings in a temporary file
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  ;; For debugging purposes only
  ;; (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)

#+end_src

* Allow periodic tasks to run during the day
This allows things like buffer cleanup to happen during the day instead of at midnight, when the computer is not typically on.
#+begin_src emacs-lisp
  (use-package midnight
    :config
    (midnight-delay-set 'midnight-delay "10:00am"))
#+end_src

* Auto-Reverting
#+begin_src emacs-lisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
#+end_src
* Server Mode
#+begin_src emacs-lisp
(server-start)
#+end_src
* Basic UI Configuration
#+begin_src emacs-lisp

  (scroll-bar-mode -1)                    ; Disable the visible scrollbar
  (tool-bar-mode -1)                      ; Disable the toolbar
  (tooltip-mode -1)                       ; Disable tooltips
  (set-fringe-mode 10)                    ; Give some breathing room
  (menu-bar-mode -1)                      ; Disable the menu bar

  (column-number-mode)

  (setq-default indent-tabs-mode nil
                tab-width 4)

  (setq inhibit-startup-message t
        visible-bell t
        fill-column 80
        kill-whole-line t
        require-final-newline t)

  ;; Don't make me type, I know what I'm doing
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Name the frame
  ; (set-frame-parameter nil 'name "Main")

#+end_src

** Font Configuration
#+begin_src emacs-lisp
   (set-face-attribute 'default nil :font "Jetbrains Mono" :height jpalmer/default-font-size :weight 'light)

   ;; Set the fixed pitch face
   (set-face-attribute 'fixed-pitch nil :font "Jetbrains Mono" :height jpalmer/default-font-size :weight 'light)

   ;; Set the variable pitch face
   (set-face-attribute 'variable-pitch nil :font "Fira Sans" :height jpalmer/default-variable-font-size :weight 'regular)

   ;; Enable ligatures in emacs-mac
   (mac-auto-operator-composition-mode)

#+end_src

** Theming
First, make sure that the cursor color is something that's easily noticed.
#+begin_src emacs-lisp
  (set-cursor-color "goldenrod")
#+end_src

Now install the doom themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold nil
          doom-themes-enable-italic t
          doom-themes-padded-modeline nil) ; Adds a 4 pixel margin around the modeline
    (load-theme 'doom-dark+ t)
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-org-config))
#+end_src

I'm currently testing out some other options, but my previous go-to theme was "doom-tomorrow-night".

** Allow highlighting while idle

#+begin_src emacs-lisp
  (use-package idle-highlight-mode
    :diminish idle-highlight-mode
    :config (setq idle-highlight-idle-time 0.5)
    :hook ((prog-mode text-mode) . idle-highlight-mode))
#+end_src

** Modeline Improvements

*NOTE*: The first time this configuration is loaded, the mode line icons will need to be installed via `M-x all-the-icons-install-fonts`.
#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-buffer-encoding nil)
             (doom-modeline-buffer-file-name-style 'relative-from-project)
             (doom-modeline-height 15)))
#+end_src

* Key Bindings
** Get rid of garbage defaults
There are some keybinds that I absolutely hate when operating in a modern graphical desktop environment. These should be disabled, but only when we're not in console mode.
#+begin_src emacs-lisp
  (when window-system
    (when (eq (key-binding (kbd "C-x C-z")) 'suspend-frame)
      (global-unset-key (kbd "C-x C-z")))
    (when (eq (key-binding (kbd "C-z")) 'suspend-frame)
      (global-unset-key (kbd "C-z")))
    (when (eq (key-binding (kbd "<C-tab>")) 'mac-next-tab-or-toggle-tab-bar)
      (global-unset-key (kbd "<C-tab>"))))
#+end_src
** Emacs-Mac Keybinds
#+begin_src emacs-lisp
  ;; Keybindings for Mac Emacs
  (global-set-key [(super a)] 'mark-whole-buffer)
  (global-set-key [(super v)] 'yank)
  (global-set-key [(super c)] 'kill-ring-save)
  (global-set-key [(super s)] 'save-buffer)
  (global-set-key [(super l)] 'goto-line)
  (global-set-key [(super w)]
                  (lambda () (interactive) (delete-window)))
  (global-set-key [(super z)] 'undo)

    (setq mac-command-modifier 'super
          mac-option-modifier 'meta)
#+end_src
** Which Key Support
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src
** Text Scaling
I used to have code to do this, but it turns out that there are interactive screen scaling commands already in emacs, bound to <C-x C-+>, <C-x C-->, and <C-x C-0>. Plus, they're interactive in the same way that Hydra provides, so ultimately this configuration is not needed.
** Navigation
[[https://github.com/abo-abo/avy][Avy]] makes it possible to jump to visible text using a char-based decision tree.
#+begin_src emacs-lisp
  (use-package avy
    :bind (("C-;" . avy-goto-char-2)
           ("M-g" . avy-goto-line))
    :config
    (avy-setup-default)
    (setq avy-keys '(?a ?r ?s ?t ?n ?e ?i ?o)))
#+end_src
* Helpful Help
#+begin_src emacs-lisp

  ;; Try harder apropros
  (setq-default apropos-do-all t)

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-symbol] . counsel-describe-symbol)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))

#+end_src

* Completion
This configuration uses Ivy, Counsel, and Swiper.
TODO: Break this into chunks?
TODO: Try out vertico?
#+begin_src emacs-lisp

  (use-package company
    :diminish company-mode
    :config (global-company-mode))

  (use-package company-posframe
    :config
    (company-posframe-mode 1))

  (use-package ivy-posframe
    :config
    (setq  ivy-posframe-parameters '((left-fringe . 8) (right-fringe . 8))
          ivy-posframe-display-functions-alist
          '((swiper          . nil)
            (complete-symbol . ivy-posframe-display-at-point)
            ;;(counsel-M-x     . ivy-posframe-display-at-frame-bottom-left)
            (t               . ivy-posframe-display-at-frame-center)))
    (ivy-posframe-mode 1))

  ;; Ivy/Counsel/Swiper Configuration
  (use-package ivy
    :diminish ivy-mode
    :bind
    (:map ivy-mode-map ("C-'" . ivy-avy))
    :config
    (setq projectile-completion-system 'ivy
          ivy-use-virtual-buffers t
          ivy-height 13
          ivy-display-style 'fancy
          ivy-initial-inputs-alist nil
          ivy-count-format "%d/%d "
          ivy-virtual-abbreviate 'full ;; show the full virtual file paths
          ivy-extra-directories '("./")
          ivy-wrap t
          ivy-re-builders-alist '((counsel-M-x . ivy--regex-fuzzy)
                                  (t . ivy--regex-plus)))
    (ivy-mode 1))

  (use-package ivy-rich
    :after (ivy counsel)
    :config
    (setq ivy-rich-path-style 'abbrev)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
    (ivy-rich-mode 1))

  (use-package counsel-projectile
    :after (projectile counsel)
    :config
    (counsel-projectile-mode))

  (use-package counsel
    :after ivy
    :bind*
    (("M-x" . counsel-M-x)
     ("C-c d d" . counsel-descbinds)
     ("C-c s s" . counsel-ag)
     ("C-c s d" . counsel-ag-projectile)
     ("C-x C-f" . counsel-find-file)
     ("C-x r f" . counsel-recentf)
     ("C-c g g" . counsel-git)
     ("C-c g G" . counsel-git-grep)
     ("C-x l" . counsel-locate)
     ("C-c g s" . counsel-grep-or-swiper)
     ("C-M-y" . counsel-yank-pop)
     ("C-c C-r" . ivy-resume)
     ("C-c i m" . counsel-imenu)
     ("C-c i M" . ivy-imenu-anywhere)
     ("C-c d s" . describe-symbol)
     ("C-c o" . counsel-org-agenda-headlines)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line-and-call))
    :config
    (progn
      (defun reloading (cmd)
        (lambda (x)
          (funcall cmd x)
          (ivy--reset-state ivy-last)))
      (defun given-file (cmd prompt)      ; needs lexical-binding
        (lambda (source)
          (let ((target
                 (let ((enable-recursive-minibuffers t))
                   (read-file-name
                    (format "%s %s to:" prompt source)))))
            (funcall cmd source target 1))))
      (defun confirm-delete-file (x)
        (dired-delete-file x 'confirm-each-subdirectory))

      (ivy-add-actions
       'counsel-find-file
       `(("c" ,(given-file #'copy-file "Copy") "copy")
         ("d" ,(reloading #'confirm-delete-file) "delete")
         ("m" ,(reloading (given-file #'rename-file "Move")) "move")))

      (ivy-add-actions
       'counsel-projectile-find-file
       `(("c" ,(given-file #'copy-file "Copy") "copy")
         ("d" ,(reloading #'confirm-delete-file) "delete")
         ("m" ,(reloading (given-file #'rename-file "Move")) "move")
         ("b" counsel-find-file-cd-bookmark-action "cd bookmark")))

      ;; to make counsel-ag search the root projectile directory.
      (defun counsel-ag-projectile ()
        (interactive)
        (counsel-ag nil (projectile-project-root)))

      (setq counsel-find-file-at-point t)

      ;; ignore . files or temporary files
      (setq counsel-find-file-ignore-regexp
            (concat
             ;; File names beginning with # or .
             "\\(?:\\`[#.]\\)"
             ;; File names ending with # or ~
             "\\|\\(?:\\`.+?[#~]\\'\\)"))))

  (use-package swiper
    :bind ("C-s" . swiper))

  ;; further customization of ivy and company
  (use-package prescient
    :after (ivy company)
    :config
    (prescient-persist-mode))

  (use-package ivy-prescient
    :after prescient
    :config
    (ivy-prescient-mode))

  (use-package company-prescient
    :after prescient
    :config
    (company-prescient-mode))

#+end_src
* Window Management
** Window layout management via Eyebrowse
#+begin_src emacs-lisp
  (use-package eyebrowse
    :init
    (setq eyebrowse-keymap-prefix (kbd "C-c w"))
    :config
    (setq eyebrowse-mode-line-separator " "
          eyebrowse-new-workspace t)
    (eyebrowse-mode t))

  ;; save the eyebrowse layout periodically
  ;; (use-package eyebrowse-restore
  ;;   :straight (eyebrowse-restore :type git :host github :repo "FrostyX/eyebrowse-restore")
  ;;   :config (eyebrowse-restore-mode))
#+end_src

** Window Layout Persistence
#+begin_src emacs-lisp
  (use-package desktop
    :init (desktop-save-mode 1))
#+end_src

** Window Layout Undo/Redo via Winner Mode
Winner mode allows you to easily undo/redo window configuration changes by pressing <C-c left> or <C-c right>
#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

** Window Navigation
Support directional and letter-based buffer navigation
#+begin_src emacs-lisp
  ;; This allows window navigation by pressing <Shift+Direction>
  (windmove-default-keybindings)
  (use-package ace-window
    :bind
    (("M-o" . ace-window))
    :config
    (setq aw-keys '(?a ?r ?s ?t ?n ?e ?i ?o)
          aw-ignore-current t))
#+end_src

** Control buffer placement
#+begin_src emacs-lisp
  (setq display-buffer-base-action
      '(display-buffer-reuse-mode-window
        display-buffer-reuse-window
        display-buffer-same-window))
  ;; If a popup does happen, don't resize windows to be equally sized
  (setq even-window-sizes nil)
#+end_src

* General Editing
** Hungry Delete
This deletes all whitespace up to the last non-whitespace character when editing. It can be very handy.
#+begin_src emacs-lisp
  (use-package smart-hungry-delete
    :bind (([remap backward-delete-char-untabify] . smart-hungry-delete-backward-char)
           ([remap delete-backward-char] . smart-hungry-delete-backward-char)
           ([remap delete-char] . smart-hungry-delete-forward-char))
    :init (smart-hungry-delete-add-default-hooks))
#+end_src
** Whitespace Highlighting
This highlights any odd whitespace in a buffer.
#+begin_src emacs-lisp
  (use-package whitespace
    :config
    (setq whitespace-style '(face trailing newline))
    ;; This should probably be enabled everywhere?
    (global-whitespace-mode))
#+end_src
** Enabling per-file location saving
#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src
* Programming
** General Quality of Life Items
*** Comment line keybind
#+begin_src emacs-lisp
(define-key prog-mode-map (kbd "s-/") 'comment-line)
#+end_src

*** Set PATH from shell
For some reason emacs doesn't normally start with the PATH from the
shell on MacOS. This corrects that behavior so it's easier to run
installed programs.
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (setq exec-path-from-shell-check-startup-files nil)
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize)))
#+end_src

*** Keychain support
This is required to ensure that SSH interaction with GitHub (for example) is seamless.
#+begin_src emacs-lisp
  (use-package keychain-environment
    :config
    (keychain-refresh-environment))
#+end_src

*** [[https://github.com/leoliu/easy-kill][Easy Kill]] - Kill and Mark Things Easily
#+begin_src emacs-lisp
  (use-package easy-kill
    :config
    (global-set-key [remap kill-ring-save] #'easy-kill)
    (global-set-key [remap mark-sexp] #'easy-mark))
#+end_src

*** Highlight Parentheses
#+begin_src emacs-lisp
  ; (use-package highlight-parentheses)
  ;; Try this other option for now
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+end_src
*** Highlight indentation levels
Show an indicator for the start of an indentation scope.
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config (setq highlight-indent-guides-method 'bitmap)
    :hook (prog-mode . highlight-indent-guides-mode))
#+end_src
*** Paredit for lisp languages
#+begin_src emacs-lisp
  (use-package paredit
    :diminish paredit-mode
    :hook
    ((clojure-mode cider-repl-mode emacs-lisp-mode lisp-mode lisp-interaction-mode) . enable-paredit-mode))
#+end_src

*** Highlight FIXME, TODO, etc.
I tried another package ([[https://github.com/tarsius/hl-todo][hl-todo]]) but was unable to get it to work easily, so I'm sticking with fic-mode.
#+begin_src emacs-lisp :tangle no
  (use-package fic-mode
    :diminish fic-mode
    :hook prog-mode)
#+end_src

Try using =hl-todo= one more time.
#+begin_src emacs-lisp
  (use-package hl-todo)
#+end_src

*** Project Support
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    :diminish projectile-mode)
#+end_src
*** Highlight color names in buffers
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook (org-mode emacs-lisp-mode web-mode typescript-mode js2-mode))
#+end_src
** Version Control
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :config
    (progn
      (defadvice magit-status (around magit-fullscreen activate)
        (window-configuration-to-register :magit-fullscreen)
        ad-do-it
        (delete-other-windows))
      (defun magit-quit-session ()
        "Restores the previous window configuration and kills the magit buffer"
        (interactive)
        (kill-buffer)
        (jump-to-register :magit-fullscreen))
      (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)))
#+end_src
*** Fringe Indicators
#+begin_src emacs-lisp
  (use-package git-gutter
    :config
    (global-git-gutter-mode t))

  (use-package fringe-helper)

  (use-package git-gutter-fringe
    :after (git-gutter fringe-helper)
    :config
    (setq git-gutter-fr:side 'right-fringe))
#+end_src
*** Languages
**** Language Server Support

This configuration is for LSP mode
#+begin_src emacs-lisp :tangle no
  (use-package lsp-mode
    :commands lsp lsp-deferred
    :hook ((typescript-mode js2-mode web-mode) . lsp-deferred)
    ; :bind (:map lsp-mode-map ("TAB" . completion-at-point))
    :custom (lsp-headerline-breadcrumb-enable nil)
    )

  ;; also install lsp-ui
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable t
          lsp-ui-flycheck-enable t
          lsp-ui-imenu-enable t
          lsp-ui-sideline-ignore-duplicate t
          lsp-ui-sideline-show-hover nil
          lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))
#+end_src

This configuration is for eglot.
#+begin_src emacs-lisp
  (use-package eglot
    :custom (eglot-autoshutdown t))

  ;; Force eglot to use flycheck instead of flymake
  (use-package flycheck-eglot
    :after (flycheck eglot)
    :straight (flycheck-eglot :type git :host nil :repo "https://gist.github.com/89d00717ac6c6fba1a72b165fd588f4c.git"))

#+end_src

Eglot doesn't automatically install language servers, so set up a
script that will be generated to take care of that.
#+begin_src shell :tangle ./install-language-servers.sh
  #!/bin/sh
  #
  # Install required language servers based on Emacs.org
  #
  # This script is auto-generated - DO NOT EDIT
  #
#+end_src

**** Typescript/Javascript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2))

  (defun jpalmer/set-js-indentation ()
    (setq js-indent-level 2)
    (setq-default tab-width 2))

  (use-package js2-mode
    :mode "\\.jsx?\\'"
    :config
    ;; Don't use built-in syntax checking
    (setq js2-mode-show-strict-warnings nil)
    (add-hook 'js2-mode-hook #'jpalmer/set-js-indentation)
    (add-hook 'json-mode-hook #'jpalmer/set-js-indentation))

  (use-package apheleia
    :config
    (apheleia-global-mode +1))

  (use-package prettier-js
    :config
    (setq prettier-js-show-errors nil))

#+end_src

Also make sure that the ts/js language server is installed by adding it to the language server installation script:
#+begin_src shell :tangle ./install-language-servers.sh
  npm install -g typescript-language-server typescript
#+end_src


**** TODO: Svelte Mode
**** TODO: Julia Mode
**** Emacs Lisp
#+begin_src emacs-lisp :tangle no
  ;; FIXME: Put this back
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)
#+end_src
**** WebGL/GLSL

#+begin_src emacs-lisp :tangle no
  ;; FIXME: Put this back
  (use-package glsl-mode
    :mode "(\\.\\(glsl\\|vert\\|frag\\|geom\\)\\'")

  ;; Add completion support for glsl
  (use-package company-glsl
    :config
    (when (executable-find "glslangValidator")
      (add-to-list 'company-backends 'company-glsl)))

  ;; Add flycheck support for glsl
  (use-package flycheck-glsl
    :after flycheck
    :straight (flycheck-glsl :type git :host github :repo "yrns/flycheck-glsl"
                             :fork (:host github :repo "JeffreyPalmer/flycheck-glsl")))

  ;; try another package, as the first one requires some rework
  ;; (use-package flycheck-glsl
  ;;   :after flycheck
  ;;   :straight (flycheck-glsl :type git :host github :repo "Kaali/flycheck-glsl"))

  ;; Using the code directly
  ;; (with-eval-after-load 'flycheck
  ;;   (flycheck-define-checker jpalmer/glsl-lang-validator
  ;;     "A GLSL checker using glslangValidator.
  ;;   See URL https://www.khronos.org/opengles/sdk/tools/Reference-Compiler/"
  ;;     :command ("glslangValidator" source)
  ;;     :error-patterns
  ;;     ((error line-start "ERROR: " column ":" line ": " (message) line-end))
  ;;     :modes glsl-mode)

  ;;   (add-to-list 'flycheck-checkers 'jpalmer/glsl-lang-validator))
#+end_src
**** HTML
#+begin_src emacs-lisp
  (use-package web-mode
    :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
    :config
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))

  ;; Start the server with `httpd-start`
  ;; Use `impatient-mode` in any buffer
  (use-package impatient-mode)

  (use-package skewer-mode)
#+end_src
*** Compilation
Set up the compile package and ensure that compilation output automatically scrolls.
#+begin_src emacs-lisp
  (use-package compile
    :custom
    (compilation-sroll-output t))

  (defun auto-recompile-buffer ()
    (interactive)
    (if (member #'recompile after-save-hook)
        (remove-hook 'after-save-hook #'recompile t)
      (add-hook 'after-save-hook #'recompile nil t)))
#+end_src
*** Syntax Checking with flycheck
#+begin_src emacs-lisp :tangle no
    (use-package flycheck
      :defer t
      :custom
      ; (flycheck-highlighting-mode 'lines)
      ; (flycheck-highlighting-style 'level-face)
      (flycheck-indication-mode 'right-fringe)
      ;; FIXME: This will probably need to be fixed
      ; :hook (lsp-mode glsl-mode)
      :config (global-flycheck-mode))

    ;; I'm not sure that I like this, so disabling for now
    (use-package flycheck-pos-tip
      :disabled
      :after flycheck
      :config (flycheck-pos-tip-mode))
#+end_src
*** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config (yas-reload-all))
#+end_src
* Text Editing
Enable automatic wrapping of long lines in text modes, only. This
makes it easier to edit text files, but leaves code formatting up to
the developer.
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+end_src

** Markdown Support
#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode
    (("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :config
    (setq markdown-fontify-code-blocks-natively t)
    (defun jpalmer/set-markdown-header-font-sizes ()
      (dolist (face '((markdown-header-face-1 . 1.2)
                      (markdown-header-face-2 . 1.1)
                      (markdown-header-face-3 . 1.0)
                      (markdown-header-face-4 . 1.0)
                      (markdown-header-face-5 . 1.0)))
        (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))
    (defun jpalmer/markdown-mode-hook ()
      (jpalmer/set-markdown-header-font-sizes))
    (add-hook 'markdown-mode-hook 'jpalmer/markdown-mode-hook))
#+end_src

* Org Mode

** General Org Setup
#+begin_src emacs-lisp
  (use-package org
    ;; :ensure org-contrib
    ;; :pin gnu
    :straight (:type built-in)
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c b" . org-switchb)
           ("<f12>" . org-agenda))
    :hook
    ((org-mode . (lambda () (variable-pitch-mode t)))
     (org-mode . visual-line-mode))
    :config
    (setq org-directory "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org"
          org-agenda-files (list org-directory)
          org-agenda-start-day nil
          org-default-notes-file (concat org-directory "/inbox.org")
          org-clock-persist 'history
          org-enforce-todo-dependencies t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-src-fontify-natively t
          org-hide-emphasis-markers t
          org-hide-leading-stars t
          org-insert-heading-respect-content t
          org-catch-invisible-edits 'show-and-error
          org-use-speed-commands t
          ;; open org links in the same window
          org-link-frame-setup '((file . find-file))
          ;; calculate completion statistics for multi-level projects
          org-hierarchical-todo-statistics nil
          ;; org-agenda-hide-tags-regexp TODO - figure out what this should be
          ;; don't show scheduled TODO items
          org-agenda-todo-ignore-scheduled 'future
          ;; logging work
          org-log-done 'time
          org-log-into-drawer "LOGBOOK"
          ;; capture settings
          org-capture-templates '(("t" "To Do" entry (file "")
                                   "* TODO %?\n")
                                  ("g" "Generic" entry (file "")
                                   "* %?\n")
                                  ("j" "Journal Entry"
                                   entry (file+olp+datetree "journal.org")
                                   "* %?")
                                  ("l" "A link, for reading later." entry (file "")
                                   "* [[%:link][%:description]]%?"))
          ;; refile settings
          org-refile-targets '((nil :maxlevel . 9)
                               (org-agenda-files :maxlevel . 9))
          org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm
          org-log-note-headings '((done        . "CLOSING NOTE %t")
                                  (note        . "Note taken on %t")
                                  (state       . "State %-12s from %-12S %t")
                                  (reschedule  . "Rescheduled from %S on %t")
                                  (delschedule . "Not scheduled, was %S on %t")
                                  (redeadline  . "New deadline from %S on %t")
                                  (deldeadline . "Removed deadline, was %S on %t"))
          org-startup-indented t
          org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "TODAY(y)" "IN_PROGRESS(i)" "WAITING(w@/!)" "|" "DONE(d!/!)")
                              (sequence "PROJECT(p)" "ACTIVE(a)" "|" "FINISHED(f!)" "CANCELLED(c@)")
                              (sequence "SOMEDAY(S!)" "MAYBE(m!)"))
          org-todo-keyword-faces '(("TODO" :foreground "DodgerBlue3")
                                   ("NEXT" :foreground "DodgerBlue2")
                                   ("TODAY" :foreground "SpringGreen2")
                                   ("IN_PROGRESS" :foreground "SpringGreen2")
                                   ("DONE" :foreground "forest green")
                                   ("PROJECT" :foreground "cornflower blue")
                                   ("ACTIVE" :foreground "deep sky blue")
                                   ("FINISHED" :foreground "forest green")
                                   ("CANCELLED" :foreground "goldenrod")
                                   ("WAITING" :foreground "coral")
                                   ("SOMEDAY" :foreground "purple")
                                   ("MAYBE" :foreground "purple"))
          org-todo-state-tags-triggers '(("PROJECT" ("project" . t) ("active" . nil))
                                         ("" ("project" . nil) ("active" . nil))
                                         ("ACTIVE" ("active" . t))
                                         ("FINISHED" ("active" . nil))
                                         ("SOMEDAY" ("active" . nil))
                                         ("MAYBE" ("active" . nil)))
          ;; agenda customization
          org-agenda-span 'day
          org-stuck-projects '("/PROJECT|ACTIVE" ("NEXT" "TODAY") nil "")
          org-agenda-compact-blocks nil
          org-agenda-block-separator ?\-
          org-agenda-dim-blocked-tasks nil
          org-agenda-custom-commands
          '(
            ;; a view that supports:
            ;; - most important task of the day
            ;; - secondary tasks
            ;; - other tasks if i have time
            ("d" "Daily View"
             ((agenda "" nil)
              (todo "WAITING"
                    ((org-agenda-overriding-header "Waiting")))
              (tags-todo "/TODAY|IN_PROGRESS"
                         ((org-agenda-overriding-header "Most Important Tasks for Today")))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")))
              (tags-todo "active/NEXT"
                         ((org-agenda-overriding-header "Active Project Next Tasks")
                          (org-agenda-sorting-strategy '(todo-state-down category-keep))))
              (tags "REFILE"
                    ((org-agenda-overriding-header "Inbox")
                     (org-tags-match-list-sublevels nil)))
              (tags-todo "-active+project/NEXT"
                         ((org-agenda-overriding-header "Other Project Next Tasks")
                          (org-agenda-sorting-strategy '(todo-state-down category-keep))))
              (tags-todo "+active/TODO"
                         ((org-agenda-overriding-header "Active Project Tasks")
                          (org-agenda-sorting-strategy '(todo-state-down category-keep))))))
            ("D" "Review completed tasks"
             ((tags-todo "/DONE"
                         ((org-agenda-overriding-header "Completed Tasks and Projects")))))
            ("n" "Non-Project Tasks"
             ((tags-todo "-project-active/!TODO|NEXT|TODAY"
                         ((org-agenda-overriding-header "Non-Project Tasks")))))
            ("p" "Project Review"
             ((tags-todo "/PROJECT|ACTIVE"
                         ((org-agenda-overriding-header "Stuck Projects")
                          (org-agenda-skip-function '(org-agenda-skip-subtree-if 'todo '("NEXT" "TODAY")))))
              (tags-todo "/ACTIVE"
                         ((org-agenda-overriding-header "Active Projects")
                          (org-agenda-skip-function '(org-agenda-skip-subtree-if 'nottodo '("NEXT" "TODAY")))))
              (tags-todo "/PROJECT"
                         ((org-agenda-overriding-header "Other Projects")
                          (org-agenda-skip-function '(org-agenda-skip-subtree-if 'nottodo '("NEXT" "TODAY")))))
              (tags-todo "-CANCELLED/"
                         ((org-agenda-overriding-header "Reviews Scheduled")
                          (org-agenda-skip-function 'org-review-agenda-skip)
                          (org-agenda-cmp-user-defined 'org-review-compare)
                          (org-agenda-sorting-strategy '(user-defined-down))))))
            ("h" "Habits" tags-todo "STYLE=\"habit\""
             ((org-agenda-overriding-header "Habits")
              (org-agenda-sorting-strategy
               '(todo-state-down effort-up category-keep))))
            ("i" "Inbox" tags "REFILE"
             ((org-agenda-overriding-header "Inbox")
              (org-tags-match-list-sublevels nil)))))
    (org-clock-persistence-insinuate)
    (add-hook 'org-mode-hook
              '(lambda ()
                 ;; undefine C-c [ and C-c ]
                 (org-defkey org-mode-map (kbd "C-c [") 'undefined)
                 (org-defkey org-mode-map (kbd "C-c ]") 'undefined)
                 ;; make sure that org-reveal is bound
                 (org-defkey org-mode-map (kbd "C-c r") 'org-reveal))))
#+end_src

** Better Fonts
*** Improved bullet formatting
#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Font Adjustments
#+begin_src emacs-lisp
  (with-eval-after-load 'org-faces
    ;; Increase the size of various headings
    (set-face-attribute 'org-document-title nil :font "Avenir Next" :weight 'bold :height 1.3)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Avenir Next" :weight 'medium :height (cdr face)))

    ;; Make sure org-indent face is available
    (require 'org-indent)

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    ; (set-face-attribute 'org-link nil   :weight 'regular :inherit 'variable-pitch)
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

    ;; Get rid of the background on column views
    (set-face-attribute 'org-column nil :background nil)
    (set-face-attribute 'org-column-title nil :background nil))
#+end_src

** Fixup agenda display of empty sections
#+begin_src emacs-lisp
  (defun jpalmer/org-agenda-delete-empty-blocks ()
    "Remove empty agenda blocks.
     A block is identified as empty if there are fewer than 2
     non-empty lines in the block (excluding the line with
     `org-agenda-block-separator' characters)."
    (when org-agenda-compact-blocks
      (user-error "Cannot delete empty compact blocks"))
    (setq buffer-read-only nil)
    (save-excursion
      (goto-char (point-min))
      (let* ((blank-line-re "^\\s-*$")
             (content-line-count (if (looking-at-p blank-line-re) 0 1))
             (start-pos (point))
             (block-re (format "%c\\{10,\\}" org-agenda-block-separator)))
        (while (and (not (eobp)) (forward-line))
          (cond
           ((looking-at-p block-re)
            (when (< content-line-count 2)
              (delete-region start-pos (1+ (point-at-bol))))
            (setq start-pos (point))
            (forward-line)
            (setq content-line-count (if (looking-at-p blank-line-re) 0 1)))
           ((not (looking-at-p blank-line-re))
            (setq content-line-count (1+ content-line-count)))))
        (when (< content-line-count 2)
          (delete-region start-pos (point-max)))
        (goto-char (point-min))
        ;; The above strategy can leave a separator line at the beginning
        ;; of the buffer.
        (when (looking-at-p block-re)
          (delete-region (point) (1+ (point-at-eol))))))
    (setq buffer-read-only t))
(add-hook 'org-agenda-finalize-hook #'jpalmer/org-agenda-delete-empty-blocks)

#+end_src

** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Documents/OrgRoam")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n r" . org-roam-refile)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode))
#+end_src


** Other org miscellany
#+begin_src emacs-lisp
  ; (require org-checklist)
  ; (use-package org-checklist)

  (use-package org-pomodoro
    :bind
    ("C-c p" . org-pomodoro)
    :config
    (setq alert-user-configuration '((((:category . "org-pomodoro")) osx-notifier nil))
          org-pomodoro-format "🍅~%s"))

  (use-package org-review
    :bind
    (("C-c v" . org-review-insert-last-review)))
#+end_src


** Tempo Mode for Structure Templates
#+begin_src emacs-lisp

  ;; TODO: Enable this once org mode is fully set up
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))

#+end_src

** Auto-Tangle Configuration Files

#+begin_src emacs-lisp

  (defun jpalmer/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "./Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jpalmer/org-babel-tangle-config)))

#+end_src

* Tree Navigation
Set up a tree-based navigation system, just in case.
#+begin_src emacs-lisp
  (use-package neotree
    :bind ("<f8>" . neotree-project-dir)
    :hook
    (neotree-mode . (lambda ()
                      (variable-pitch-mode t)))
    :config
    (setq neo-smart-open t
          projectile-switch-project-action 'neotree-projectile-action
          neo-theme 'icons
          neo-window-width 35)
    (defun neotree-project-dir ()
      "Open NeoTree using the git root."
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                (progn
                  (neotree-dir project-dir)
                  (neotree-find file-name)))
          (message "Could not find git project root.")))))
#+end_src

* Wrap-Up Configuration

Reset garbage collection to a reasonable default.
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1024 1024))
#+end_src
